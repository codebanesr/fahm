worker_processes 1;

load_module /usr/lib/nginx/modules/ngx_http_auth_jwt_module.so;
events {
    worker_connections 1024;
}

http {
    limit_req_zone $binary_remote_addr zone=rate_limit_zone:10m rate=5r/m;

    server {
        listen 80;
        server_name localhost;
        error_page 503 = @limit_exceeded;
        location @limit_exceeded {
            return 503 '{"error": "You have exceeded the free limit. Please upgrade your account."}';
        }

        location / {
            auth_jwt          off;
            auth_jwt_key 'secret' utf8;

            proxy_pass http://fahm_backend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Extracting rate_limit_value from JWT token
            if ($jwt_claim_rate_limit_value) {
                set $rate_limit_value $jwt_claim_rate_limit_value;
            }

            # Applying rate limit based on the rate_limit_value
            limit_req zone=rate_limit_zone burst=10 nodelay;
            limit_req_status 503;
        }

        location ~ ^/extract {
            auth_jwt          on;
            auth_jwt_key 'Usw5kPM78G' utf8;

            proxy_pass http://fahm_backend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Extracting rate_limit_value from JWT token
            if ($jwt_claim_rate_limit_value) {
                set $rate_limit_value $jwt_claim_rate_limit_value;
            }

            # Applying rate limit based on the rate_limit_value
            limit_req zone=rate_limit_zone burst=10 nodelay;
            limit_req_status 503;
        }
    }
}
